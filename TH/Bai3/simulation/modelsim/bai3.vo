// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition"

// DATE "04/11/2025 22:20:47"

// 
// Device: Altera EP2C35F672C6 Package FBGA672
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module mealy (
	I,
	clk,
	Y);
input 	I;
input 	clk;
output 	Y;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \I~combout ;
wire \clk~combout ;
wire \current_state.01~0_combout ;
wire \current_state.01~regout ;
wire \Selector2~0_combout ;
wire \current_state.10~regout ;
wire \Y~0_combout ;
wire \Y~reg0_regout ;


cycloneii_io \I~I (
	.datain(gnd),
	.oe(gnd),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(\I~combout ),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(I));
// synopsys translate_off
defparam \I~I .input_async_reset = "none";
defparam \I~I .input_power_up = "low";
defparam \I~I .input_register_mode = "none";
defparam \I~I .input_sync_reset = "none";
defparam \I~I .oe_async_reset = "none";
defparam \I~I .oe_power_up = "low";
defparam \I~I .oe_register_mode = "none";
defparam \I~I .oe_sync_reset = "none";
defparam \I~I .operation_mode = "input";
defparam \I~I .output_async_reset = "none";
defparam \I~I .output_power_up = "low";
defparam \I~I .output_register_mode = "none";
defparam \I~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \clk~I (
	.datain(gnd),
	.oe(gnd),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(\clk~combout ),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(clk));
// synopsys translate_off
defparam \clk~I .input_async_reset = "none";
defparam \clk~I .input_power_up = "low";
defparam \clk~I .input_register_mode = "none";
defparam \clk~I .input_sync_reset = "none";
defparam \clk~I .oe_async_reset = "none";
defparam \clk~I .oe_power_up = "low";
defparam \clk~I .oe_register_mode = "none";
defparam \clk~I .oe_sync_reset = "none";
defparam \clk~I .operation_mode = "input";
defparam \clk~I .output_async_reset = "none";
defparam \clk~I .output_power_up = "low";
defparam \clk~I .output_register_mode = "none";
defparam \clk~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_lcell_comb \current_state.01~0 (
// Equation(s):
// \current_state.01~0_combout  = !\I~combout 

	.dataa(\I~combout ),
	.datab(vcc),
	.datac(vcc),
	.datad(vcc),
	.cin(gnd),
	.combout(\current_state.01~0_combout ),
	.cout());
// synopsys translate_off
defparam \current_state.01~0 .lut_mask = 16'h5555;
defparam \current_state.01~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_lcell_ff \current_state.01 (
	.clk(\clk~combout ),
	.datain(\current_state.01~0_combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\current_state.01~regout ));

cycloneii_lcell_comb \Selector2~0 (
// Equation(s):
// \Selector2~0_combout  = (\I~combout  & \current_state.01~regout )

	.dataa(\I~combout ),
	.datab(\current_state.01~regout ),
	.datac(vcc),
	.datad(vcc),
	.cin(gnd),
	.combout(\Selector2~0_combout ),
	.cout());
// synopsys translate_off
defparam \Selector2~0 .lut_mask = 16'h8888;
defparam \Selector2~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_lcell_ff \current_state.10 (
	.clk(\clk~combout ),
	.datain(\Selector2~0_combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\current_state.10~regout ));

cycloneii_lcell_comb \Y~0 (
// Equation(s):
// \Y~0_combout  = (!\I~combout  & \current_state.10~regout )

	.dataa(\I~combout ),
	.datab(vcc),
	.datac(vcc),
	.datad(\current_state.10~regout ),
	.cin(gnd),
	.combout(\Y~0_combout ),
	.cout());
// synopsys translate_off
defparam \Y~0 .lut_mask = 16'h5500;
defparam \Y~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_lcell_ff \Y~reg0 (
	.clk(\clk~combout ),
	.datain(\Y~0_combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\Y~reg0_regout ));

cycloneii_io \Y~I (
	.datain(\Y~reg0_regout ),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(Y));
// synopsys translate_off
defparam \Y~I .input_async_reset = "none";
defparam \Y~I .input_power_up = "low";
defparam \Y~I .input_register_mode = "none";
defparam \Y~I .input_sync_reset = "none";
defparam \Y~I .oe_async_reset = "none";
defparam \Y~I .oe_power_up = "low";
defparam \Y~I .oe_register_mode = "none";
defparam \Y~I .oe_sync_reset = "none";
defparam \Y~I .operation_mode = "output";
defparam \Y~I .output_async_reset = "none";
defparam \Y~I .output_power_up = "low";
defparam \Y~I .output_register_mode = "none";
defparam \Y~I .output_sync_reset = "none";
// synopsys translate_on

endmodule
